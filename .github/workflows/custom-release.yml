name: Build and Release Soroban Contracts

on:
  push: 
    tags:
      - 'v*'  # triggered whenever a new tag (prefixed with "v") is pushed to the repository

permissions:
  id-token: write
  contents: write
  attestations: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  STELLAR_CLI_VERSION: 23.0.1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy
      
      - name: Install wasm-opt
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
          tar xzf binaryen-version_116-x86_64-linux.tar.gz
          sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            libdbus-1-dev \
            libssl-dev \
            libudev-dev \
            pkg-config \
            libusb-1.0-0-dev

      - name: Install Stellar CLI ${{ env.STELLAR_CLI_VERSION }}
        run: |
          cargo install --locked --version ${{ env.STELLAR_CLI_VERSION }} stellar-cli
          stellar --version
          
      - name: Build all contracts
        run: |
          python build_contracts.py
          
      - name: Verify built WASM files
        run: |
          echo "Built WASM files:"
          find . -name "*.wasm" -type f -exec ls -la {} \;
          
          # Verify each contract was built
          for contract in pintheon-node-token pintheon-ipfs-token opus_token hvym-collective; do
            wasm_file=$(find . -name "${contract}.optimized.wasm" -o -name "${contract}.wasm" | head -1)
            if [ -z "$wasm_file" ]; then
              echo "::error::Failed to find built WASM for ${contract}"
              exit 1
            fi
            echo "Found ${contract}: ${wasm_file}"
          done

      - name: Prepare release assets
        run: |
          # Create release directory
          mkdir -p release-wasm
          
          # Copy all optimized WASM files to release directory
          for contract in pintheon-node-token pintheon-ipfs-token opus_token hvym-collective; do
            wasm_file=$(find . -name "${contract}.optimized.wasm" -o -name "${contract}.wasm" | head -1)
            if [ -n "$wasm_file" ]; then
              cp "$wasm_file" "release-wasm/$(basename "$wasm_file")"
            fi
          done
          
          # List all release assets
          echo "Release assets:"
          ls -la release-wasm/
          
          # Generate checksums
          (cd release-wasm && sha256sum *.wasm > checksums.sha256)
          cat release-wasm/checksums.sha256
          
      - name: Generate SBOM and attestations
        uses: anchore/sbom-action@v0.15.1
        with:
          path: release-wasm
          output-file: sbom.spdx
          format: spdx-json
          
      - name: Generate contract metadata
        run: |
          # Generate metadata for each contract
          for contract in pintheon-node-token pintheon-ipfs-token opus_token hvym-collective; do
            wasm_file=$(find . -name "${contract}.optimized.wasm" -o -name "${contract}.wasm" | head -1)
            if [ -n "$wasm_file" ]; then
              echo "Generating metadata for $wasm_file"
              stellar contract env-meta --wasm "$wasm_file" > "${wasm_file}.meta.json" 2>&1 || echo "Warning: Failed to generate metadata for $wasm_file"
            fi
          done
          
          # List all generated metadata files
          find . -name "*.meta.json" -exec ls -la {} \;

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/target/wasm32-unknown-unknown/release/*.wasm
            **/target/wasm32-unknown-unknown/release/*.meta.json
            release-wasm/
          retention-days: 7
          
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-wasm/*.wasm
            release-wasm/checksums.sha256
            sbom.spdx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
