name: Build and Release Soroban Contracts

on:
  push: 
    tags:
      - 'v*'  # triggered whenever a new tag (prefixed with "v") is pushed to the repository

permissions:
  id-token: write
  contents: write
  attestations: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  STELLAR_CLI_VERSION: 23.0.1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown,wasm32v1-none
          override: true
          components: rustfmt, clippy
          
      - name: Install wasm32v1 target
        run: rustup target add wasm32v1-none
        
      - name: Show installed targets
        run: rustup target list --installed
      
      - name: Install wasm-opt
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
          tar xzf binaryen-version_116-x86_64-linux.tar.gz
          sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libssl-dev \
            libudev-dev \
            pkg-config \
            libusb-1.0-0-dev

      - name: Install Stellar CLI dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev pkg-config
          
      - name: Install Stellar CLI ${{ env.STELLAR_CLI_VERSION }}
        run: |
          cargo install --locked --version ${{ env.STELLAR_CLI_VERSION }} stellar-cli
          stellar --version
          
      - name: Set up Rust toolchain
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup target add wasm32v1-none
          rustup target list --installed
          
      - name: Create wasm directory
        run: |
          mkdir -p wasm
          chmod -R 777 wasm
          
      - name: Set up build environment
        run: |
          # Log the current directory structure
          echo "=== Current directory structure ==="
          find . -maxdepth 3 -type d | sort
          
          # Create and set permissions for the wasm directory
          mkdir -p wasm
          chmod -R 777 wasm
          
          # Create wasm directories in each contract directory
          for dir in pintheon-node-deployer/pintheon-node-token \
                     pintheon-ipfs-deployer/pintheon-ipfs-token \
                     opus_token \
                     hvym-collective; do
            mkdir -p "$dir/wasm"
            chmod -R 777 "$dir/wasm"
            
            # Log the directory structure for each contract
            echo -e "\n=== Contents of $dir ==="
            ls -la "$dir" || echo "Could not list $dir"
            
            echo -e "\n=== Contents of $dir/target ==="
            ls -la "$dir/target" 2>/dev/null || echo "No target directory in $dir"
            
            echo -e "\n=== Contents of $dir/wasm ==="
            ls -la "$dir/wasm" 2>/dev/null || echo "No wasm directory in $dir"
          done
          
          # Install Python dependencies
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Log the Python environment
          echo -e "\n=== Python environment ==="
          python --version
          pip list
          
      - name: Build contracts in sequence
        run: |
          # Build each contract one by one with proper error handling
          for contract in \
            "pintheon-node-deployer/pintheon-node-token" \
            "pintheon-ipfs-deployer/pintheon-ipfs-token" \
            "opus_token"; do
            
            echo "\n🚀 Building $contract..."
            if ! python cloud_build.py --contract "$contract"; then
              echo "::error::Failed to build $contract"
              exit 1
            fi
            
            # Verify the optimized WASM file was created
            contract_name=$(basename "$contract" | tr '-' '_')
            wasm_file="wasm/${contract_name}.optimized.wasm"
            if [ ! -f "$wasm_file" ]; then
              echo "::error::Optimized WASM not found after building $contract"
              echo "Expected: $(pwd)/$wasm_file"
              echo "Current directory contents:"
              ls -la wasm/ || echo "No wasm directory found"
              exit 1
            fi
            
            echo "✅ Successfully built and verified: $wasm_file"
            echo "File size: $(du -h "$wasm_file" | cut -f1)"
          done
          
          # Now build hvym-collective after all dependencies are verified
          echo "\n🚀 Building hvym-collective..."
          if ! python cloud_build.py --contract hvym-collective; then
            echo "::error::Failed to build hvym-collective"
            exit 1
          fi
          
          # Final verification of all WASM files
          echo "\n🔍 Verifying all WASM files..."
          for contract in pintheon_node_token pintheon_ipfs_token opus_token hvym_collective; do
            wasm_file="wasm/${contract}.optimized.wasm"
            if [ ! -f "$wasm_file" ]; then
              echo "::error::Missing final WASM file: $wasm_file"
              exit 1
            fi
            echo "✅ Found final WASM: $wasm_file ($(du -h "$wasm_file" | cut -f1))"
          done
          
      - name: Verify built WASM files
        run: |
          echo "Built WASM files in wasm/ directory:"
          ls -la wasm/
          
          # Verify each contract was built
          for contract in pintheon-node-token pintheon-ipfs-token opus_token hvym-collective; do
            wasm_file="wasm/${contract}.optimized.wasm"
            if [ ! -f "$wasm_file" ]; then
              echo "::error::Failed to find built WASM for ${contract}"
              exit 1
            else
              echo "✅ Found WASM for ${contract}: $(ls -la "$wasm_file")"
            fi
          done

      - name: Prepare release assets
        run: |
          # Create release directory
          mkdir -p release-wasm
          
          # Copy all optimized WASM files from wasm/ to release directory
          for contract in pintheon-node-token pintheon-ipfs-token opus_token hvym-collective; do
            wasm_file="wasm/${contract}.optimized.wasm"
            if [ -f "$wasm_file" ]; then
              cp "$wasm_file" "release-wasm/$(basename "$wasm_file")"
              echo "✅ Copied $wasm_file to release directory"
            else
              echo "::warning::WASM file not found: $wasm_file"
            fi
          done
          
          # List all files in release directory
          echo "Release assets prepared:"
          ls -la release-wasm/
          
          # Generate checksums
          (cd release-wasm && sha256sum *.wasm > checksums.sha256)
          cat release-wasm/checksums.sha256
          
      - name: Generate SBOM and attestations
        uses: anchore/sbom-action@v0.15.1
        with:
          path: release-wasm
          output-file: sbom.spdx
          format: spdx-json
          
      - name: Generate contract metadata
        run: |
          # Generate metadata for each contract
          for contract in pintheon-node-token pintheon-ipfs-token opus_token hvym-collective; do
            wasm_file=$(find . -name "${contract}.optimized.wasm" -o -name "${contract}.wasm" | head -1)
            if [ -n "$wasm_file" ]; then
              echo "Generating metadata for $wasm_file"
              stellar contract env-meta --wasm "$wasm_file" > "${wasm_file}.meta.json" 2>&1 || echo "Warning: Failed to generate metadata for $wasm_file"
            fi
          done
          
          # List all generated metadata files
          find . -name "*.meta.json" -exec ls -la {} \;

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/target/wasm32-unknown-unknown/release/*.wasm
            **/target/wasm32-unknown-unknown/release/*.meta.json
            release-wasm/
          retention-days: 7
          
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-wasm/*.wasm
            release-wasm/checksums.sha256
            sbom.spdx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
