name: Custom Build and Release Soroban Contracts

on:
  push: 
    tags:
      - 'v*'  # triggered whenever a new tag (prefixed with "v") is pushed to the repository

permissions:
  id-token: write
  contents: write
  attestations: write

jobs:
  # First, build the dependency contracts
  build-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      
      - name: Install wasm-opt
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
          tar xzf binaryen-version_116-x86_64-linux.tar.gz
          sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/
      
      - name: Install Stellar CLI
        uses: stellar/stellar-cli@v22.8.2

      - name: Add wasm32v1-none target
        run: rustup target add wasm32v1-none

      - name: List files in Node Token directory
        run: ls -l
        working-directory: pintheon-node-deployer/pintheon-node-token

      - name: Build Pintheon Node Token
        working-directory: pintheon-node-deployer/pintheon-node-token
        run: |
          stellar contract build
          stellar contract optimize --wasm target/wasm32v1-none/release/pintheon_node_token.wasm

      - name: List files in IPFS Token directory
        run: ls -l
        working-directory: pintheon-ipfs-deployer/pintheon-ipfs-token

      - name: Build Pintheon IPFS Token
        working-directory: pintheon-ipfs-deployer/pintheon-ipfs-token
        run: |
          stellar contract build
          stellar contract optimize --wasm target/wasm32v1-none/release/pintheon_ipfs_token.wasm

      - name: List files in Opus Token directory
        run: ls -l
        working-directory: opus_token

      - name: Build Opus Token
        working-directory: opus_token
        run: |
          stellar contract build
          stellar contract optimize --wasm target/wasm32v1-none/release/opus_token.wasm
      
      - name: List built WASM files
        run: |
          ls -l pintheon-node-deployer/pintheon-node-token/target/wasm32v1-none/release/
          ls -l pintheon-ipfs-deployer/pintheon-ipfs-token/target/wasm32v1-none/release/
          ls -l opus_token/target/wasm32v1-none/release/

      - name: Upload dependency artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependency-wasm-files
          path: |
            pintheon-node-deployer/pintheon-node-token/target/wasm32v1-none/release/pintheon_node_token.optimized.wasm
            pintheon-ipfs-deployer/pintheon-ipfs-token/target/wasm32v1-none/release/pintheon_ipfs_token.optimized.wasm
            opus_token/target/wasm32v1-none/release/opus_token.optimized.wasm

  # Now build hvym-collective with dependencies available
  build-hvym-collective:
    needs: build-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Add wasm32v1-none target
        run: rustup target add wasm32v1-none
      
      - name: Install Stellar CLI
        uses: stellar/stellar-cli@v22.8.2
      
      - name: Download dependency artifacts
        uses: actions/download-artifact@v4
        with:
          name: dependency-wasm-files
          path: temp-deps/
      
      - name: List all downloaded artifacts
        run: find temp-deps/
      
      - name: Copy dependency WASM files
        run: |
          mkdir -p pintheon-node-deployer/pintheon-node-token/target/wasm32v1-none/release/
          mkdir -p pintheon-ipfs-deployer/pintheon-ipfs-token/target/wasm32v1-none/release/
          mkdir -p opus_token/target/wasm32v1-none/release/
          cp temp-deps/pintheon-node-deployer/pintheon-node-token/target/wasm32v1-none/release/pintheon_node_token.optimized.wasm pintheon-node-deployer/pintheon-node-token/target/wasm32v1-none/release/
          cp temp-deps/pintheon-ipfs-deployer/pintheon-ipfs-token/target/wasm32v1-none/release/pintheon_ipfs_token.optimized.wasm pintheon-ipfs-deployer/pintheon-ipfs-token/target/wasm32v1-none/release/
          cp temp-deps/opus_token/target/wasm32v1-none/release/opus_token.optimized.wasm opus_token/target/wasm32v1-none/release/
      
      - name: Build HVYM Collective
        working-directory: hvym-collective
        run: |
          stellar contract build
          stellar contract optimize --wasm target/wasm32v1-none/release/hvym_collective.wasm
      
      - name: Get package metadata
        working-directory: hvym-collective
        run: |
          PACKAGE_NAME=$(grep -m1 '^name =' Cargo.toml | cut -d '"' -f2)
          PACKAGE_VERSION=$(grep -m1 '^version =' Cargo.toml | cut -d '"' -f2)
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "Package: $PACKAGE_NAME"
          echo "Version: $PACKAGE_VERSION"
      
      - name: Calculate WASM hash
        working-directory: hvym-collective
        run: |
          WASM_HASH=$(sha256sum target/wasm32v1-none/release/hvym_collective.optimized.wasm | cut -d ' ' -f1)
          echo "WASM_HASH=$WASM_HASH" >> $GITHUB_ENV
          echo "WASM Hash: $WASM_HASH"
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}-hvym-collective
          release_name: ${{ github.ref_name }}-hvym-collective
          body: |
            HVYM Collective contract release
            
            ## Contract Details
            - **Package**: ${{ env.PACKAGE_NAME }}
            - **Version**: ${{ env.PACKAGE_VERSION }}
            - **Home Domain**: pintheon.contracts
            - **WASM Hash**: ${{ env.WASM_HASH }}
            
            ## Files
            - `hvym_collective.optimized.wasm`: Optimized WASM contract
            
            ## Attestation
            This contract has been built and verified for the Stellar network.
          draft: false
          prerelease: false
      
      - name: Upload WASM to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: hvym-collective/target/wasm32v1-none/release/hvym_collective.optimized.wasm
          asset_name: hvym_collective.optimized.wasm
          asset_content_type: application/octet-stream
      
      - name: Create Contract Attestation
        run: |
          echo "Creating contract attestation for ${{ env.PACKAGE_NAME }}"
          echo "WASM Hash: ${{ env.WASM_HASH }}"
          echo "Package: ${{ env.PACKAGE_NAME }}"
          echo "Version: ${{ env.PACKAGE_VERSION }}"
          echo "Home Domain: pintheon.contracts"
          echo "Release: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"

  # Build other contracts using the standard workflow
  release-opus-token:
    needs: build-dependencies
    uses: stellar-expert/soroban-build-workflow/.github/workflows/release.yml@main
    with:
      release_name: ${{ github.ref_name }}-opus-token
      release_description: 'Opus Token contract release'
      home_domain: 'pintheon.contracts'
      relative_path: opus_token
      package: 'opus-token'
    secrets:
      release_token: ${{ secrets.GITHUB_TOKEN }}

  release-pintheon-node-token:
    needs: build-dependencies
    uses: stellar-expert/soroban-build-workflow/.github/workflows/release.yml@main
    with:
      release_name: ${{ github.ref_name }}-pintheon-node-token
      release_description: 'Pintheon Node Token contract release'
      home_domain: 'pintheon.contracts'
      relative_path: pintheon-node-deployer/pintheon-node-token
      package: 'pintheon-node-token'
    secrets:
      release_token: ${{ secrets.GITHUB_TOKEN }}

  release-pintheon-ipfs-token:
    needs: build-dependencies
    uses: stellar-expert/soroban-build-workflow/.github/workflows/release.yml@main
    with:
      release_name: ${{ github.ref_name }}-pintheon-ipfs-token
      release_description: 'Pintheon IPFS Token contract release'
      home_domain: 'pintheon.contracts'
      relative_path: pintheon-ipfs-deployer/pintheon-ipfs-token
      package: 'pintheon-ipfs-token'
    secrets:
      release_token: ${{ secrets.GITHUB_TOKEN }} 