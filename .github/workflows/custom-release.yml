name: Custom Build and Release Soroban Contracts

on:
  push: 
    tags:
      - 'v*'  # triggered whenever a new tag (prefixed with "v") is pushed to the repository

permissions:
  id-token: write
  contents: write
  attestations: write

jobs:
  build-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      
      - name: Install wasm-opt
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
          tar xzf binaryen-version_116-x86_64-linux.tar.gz
          sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Install system dependencies for stellar-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev pkg-config libusb-1.0-0-dev libftdi1-dev libudev-dev libssl-dev

      - name: Install Stellar CLI
        run: |
          cargo install --locked --version 22.0.0 stellar-cli --features opt
          stellar --version

      - name: List files in Node Token directory
        run: ls -l
        working-directory: pintheon-node-deployer/pintheon-node-token

      - name: Build Pintheon Node Token
        working-directory: pintheon-node-deployer/pintheon-node-token
        run: |
          cargo build --target wasm32-unknown-unknown --release
          PACKAGE_NAME=$(grep -m1 '^name =' Cargo.toml | cut -d '"' -f2)
          PACKAGE_VERSION=$(grep -m1 '^version =' Cargo.toml | cut -d '"' -f2)
          WASM_FILE_NAME="${PACKAGE_NAME}_v${PACKAGE_VERSION}.wasm"
          cp target/wasm32-unknown-unknown/release/pintheon_node_token.wasm target/wasm32-unknown-unknown/release/${WASM_FILE_NAME}
          wasm-opt --enable-bulk-memory -O3 target/wasm32-unknown-unknown/release/${WASM_FILE_NAME} -o target/wasm32-unknown-unknown/release/${WASM_FILE_NAME} || { echo "Optimization failed"; exit 1; }
          echo "Built ${WASM_FILE_NAME}"

      - name: Build Pintheon IPFS Token
        working-directory: pintheon-ipfs-deployer/pintheon-ipfs-token
        run: |
          cargo build --target wasm32-unknown-unknown --release
          PACKAGE_NAME=$(grep -m1 '^name =' Cargo.toml | cut -d '"' -f2)
          PACKAGE_VERSION=$(grep -m1 '^version =' Cargo.toml | cut -d '"' -f2)
          WASM_FILE_NAME="${PACKAGE_NAME}_v${PACKAGE_VERSION}.wasm"
          cp target/wasm32-unknown-unknown/release/pintheon_ipfs_token.wasm target/wasm32-unknown-unknown/release/${WASM_FILE_NAME}
          wasm-opt --enable-bulk-memory -O3 target/wasm32-unknown-unknown/release/${WASM_FILE_NAME} -o target/wasm32-unknown-unknown/release/${WASM_FILE_NAME} || { echo "Optimization failed"; exit 1; }
          echo "Built ${WASM_FILE_NAME}"

      - name: Upload dependency artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dependency-wasm-files
          path: |
            pintheon-node-deployer/pintheon-node-token/target/wasm32-unknown-unknown/release/pintheon-node-token_v*.wasm
            pintheon-ipfs-deployer/pintheon-ipfs-token/target/wasm32-unknown-unknown/release/pintheon-ipfs-token_v*.wasm

  release-opus-token:
    needs: build-dependencies
    uses: stellar-expert/soroban-build-workflow/.github/workflows/release.yml@main
    with:
      release_name: ${{ github.ref_name }}-opus-token
      tag_name: ${{ github.ref_name }}-opus-token
      release_description: 'Opus Token contract release'
      home_domain: 'pintheon.contracts'
      relative_path: opus_token
      package: 'opus-token'
    secrets:
      release_token: ${{ secrets.GITHUB_TOKEN }}

  release-pintheon-node-token:
    needs: build-dependencies
    uses: stellar-expert/soroban-build-workflow/.github/workflows/release.yml@main
    with:
      release_name: ${{ github.ref_name }}-pintheon-node-token
      tag_name: ${{ github.ref_name }}-pintheon-node-token
      release_description: 'Pintheon Node Token contract release'
      home_domain: 'pintheon.contracts'
      relative_path: pintheon-node-deployer/pintheon-node-token
      package: 'pintheon-node-token'
    secrets:
      release_token: ${{ secrets.GITHUB_TOKEN }}

  release-pintheon-ipfs-token:
    needs: build-dependencies
    uses: stellar-expert/soroban-build-workflow/.github/workflows/release.yml@main
    with:
      release_name: ${{ github.ref_name }}-pintheon-ipfs-token
      tag_name: ${{ github.ref_name }}-pintheon-ipfs-token
      release_description: 'Pintheon IPFS Token contract release'
      home_domain: 'pintheon.contracts'
      relative_path: pintheon-ipfs-deployer/pintheon-ipfs-token
      package: 'pintheon-ipfs-token'
    secrets:
      release_token: ${{ secrets.GITHUB_TOKEN }}

  build-hvym-collective:
    needs: build-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      - name: Install wasm-opt
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
          tar xzf binaryen-version_116-x86_64-linux.tar.gz
          sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/
      - name: Install Stellar CLI
        run: |
          cargo install --locked --version 22.0.0 stellar-cli --features opt
          stellar --version
      - name: Download dependency artifacts
        uses: actions/download-artifact@v4
        with:
          name: dependency-wasm-files
          path: temp-deps/
      - name: Build HVYM Collective
        working-directory: hvym-collective
        run: |
          cargo build --target wasm32-unknown-unknown --release
          PACKAGE_VERSION=$(grep -m1 '^version =' Cargo.toml | cut -d '"' -f2)
          cp target/wasm32-unknown-unknown/release/hvym_collective.wasm target/wasm32-unknown-unknown/release/hvym-collective_v${PACKAGE_VERSION}.wasm
      - name: Release HVYM Collective
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}-hvym-collective
          name: ${{ github.ref_name }}-hvym-collective
          body: |
            HVYM Collective contract release
          draft: false
          prerelease: false
          files: |
            hvym-collective/target/wasm32-unknown-unknown/release/hvym-collective_v*.wasm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
