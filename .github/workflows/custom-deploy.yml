name: Deploy Soroban Contracts

on:
  push:
    tags:
      - 'deploy-v*'

permissions:
  contents: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Install system dependencies for stellar-cli
        run: |
          sudo apt-get update
          sudo apt-get install -y libdbus-1-dev pkg-config libusb-1.0-0-dev libftdi1-dev libudev-dev libssl-dev

      - name: Install Stellar CLI
        run: |
          cargo install --locked --version 22.8.2 stellar-cli --features opt
          stellar --version

      - name: Install jq
        run: |
          wget https://github.com/jqlang/jq/releases/latest/download/jq-linux-amd64 -O /usr/local/bin/jq
          chmod +x /usr/local/bin/jq

      - name: Extract version and network from tag
        id: extract
        run: |
          TAG_NAME=${{ github.ref_name }}
          if [[ $TAG_NAME =~ ^deploy-v([0-9.]+)-([a-z]+)$ ]]; then
            echo "VERSION=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            echo "NETWORK=${BASH_REMATCH[2]}" >> $GITHUB_ENV
            if [[ ! "${BASH_REMATCH[2]}" =~ ^(testnet|mainnet|futurenet)$ ]]; then
              echo "Invalid network: ${BASH_REMATCH[2]}. Must be testnet, mainnet, or futurenet"
              exit 1
            fi
          else
            echo "Invalid tag format: $TAG_NAME. Expected deploy-vX.Y.Z-{testnet|mainnet|futurenet}"
            exit 1
          fi

      - name: Debug version and network
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Tag: ${{ github.ref_name }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Network: ${{ env.NETWORK }}"
          echo "Stellar CLI version: $(stellar --version)"

      - name: Create release-wasm directory
        run: mkdir -p release-wasm

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASES=(
            "v${{ env.VERSION }}-pintheon-ipfs-token"
            "v${{ env.VERSION }}-pintheon-node-token"
            "v${{ env.VERSION }}-opus-token"
            "v${{ env.VERSION }}-hvym-collective"
          )
          CONTRACTS=(
            "pintheon-ipfs-token"
            "pintheon-node-token"
            "opus-token"
            "hvym-collective"
          )
          i=0
          for RELEASE in "${RELEASES[@]}"; do
            CONTRACT=${CONTRACTS[$i]}
            echo "Downloading assets for release $RELEASE (contract: $CONTRACT)"
            RELEASE_INFO=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE")
            echo "$RELEASE_INFO" > release-wasm/release_info_$CONTRACT.json
            if [ "$(echo "$RELEASE_INFO" | jq -r '.message // "null"')" = "Not Found" ]; then
              echo "Error: Release $RELEASE not found"
              exit 1
            fi
            ASSET_COUNT=$(echo "$RELEASE_INFO" | jq -r '.assets | length')
            if [ "$ASSET_COUNT" -eq 0 ]; then
              echo "Error: No assets found for release $RELEASE"
              exit 1
            fi
            ASSET_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith(".wasm")) | .url')
            ASSET_NAME=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith(".wasm")) | .name')
            if [ -z "$ASSET_URL" ]; then
              echo "Error: No WASM asset found for release $RELEASE"
              exit 1
            fi
            echo "Downloading $ASSET_NAME from $ASSET_URL for contract $CONTRACT"
            curl -s -L -H "Authorization: Bearer $GITHUB_TOKEN" \
                 -H "Accept: application/octet-stream" \
                 "$ASSET_URL" -o "release-wasm/$ASSET_NAME"
            i=$((i + 1))
          done

      - name: List downloaded WASM files
        run: |
          echo "Listing files in release-wasm/"
          ls -l release-wasm/ || echo "No files found in release-wasm/"
          if [ -z "$(ls -A release-wasm/)" ]; then
            echo "Error: release-wasm/ is empty"
            exit 1
          fi

      - name: Verify WASM file compatibility
        run: |
          shopt -s nullglob
          WASM_FILES=(release-wasm/*_v*.wasm)
          if [ ${#WASM_FILES[@]} -eq 0 ]; then
            echo "Error: No WASM files found in release-wasm/"
            exit 1
          fi
          for wasm in "${WASM_FILES[@]}"; do
            echo "Checking env-meta for $wasm"
            stellar contract env-meta --wasm "$wasm" > env-meta-output.txt 2>&1 || { echo "env-meta failed for $wasm"; cat env-meta-output.txt; exit 1; }
            cat env-meta-output.txt >> debug_output.json
          done
          cat debug_output.json

      - name: Run deployment script with debug output
        env:
          DEPLOYER_ACCT: ${{ secrets.ACCT_SECRET }}
        run: |
          python3 deploy_released_contracts.py \
            --deployer-acct "$DEPLOYER_ACCT" \
            --network "${{ env.NETWORK }}" \
            --release-dir release-wasm \
            --rpc-url https://soroban-testnet.stellar.org \
            --debug
          if [ -f debug_output.json ]; then
            cat debug_output.json
          fi

      - name: Upload deployments.md as artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployments-md
          path: deployments.md

      - name: Upload debug output as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-output
          path: debug_output.json

      - name: Update release notes with deployments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASES=(
            "v${{ env.VERSION }}-pintheon-ipfs-token"
            "v${{ env.VERSION }}-pintheon-node-token"
            "v${{ env.VERSION }}-opus-token"
            "v${{ env.VERSION }}-hvym-collective"
          )
          for RELEASE in "${RELEASES[@]}"; do
            echo "Updating release notes for $RELEASE"
            RELEASE_INFO=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE")
            RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
            CURRENT_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
            DEPLOYMENTS_MD=$(cat deployments.md)
            NEW_BODY="$CURRENT_BODY\n\n## Deployment Details\n$DEPLOYMENTS_MD"
            curl -s -X PATCH \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
              -d "{\"body\": $(jq -R -s <<< \"$NEW_BODY\")}"
          done